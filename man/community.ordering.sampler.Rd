% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Constrain.R
\name{community.ordering.sampler}
\alias{community.ordering.sampler}
\title{Sampling Constrained Community Matrices}
\usage{
community.ordering.sampler(constrained, required.groups = c(0))
}
\arguments{
\item{constrained}{a constrained edge list (see
\code{\link{community.sampler}})}

\item{required.groups}{a vector of integers specifying which
groups of edges must always occur in the community matrix.}
}
\value{
Returns a list with elements
\item{\code{community()}}{a function to generate a random community matrix}
\item{\code{select(p)}}{a function that randomly selects which uncertain edges will be retained}
\item{\code{weights(W)}}{a function that returns the (non-zero) weights as a vector}
\item{\code{edge.labels}}{the labels of the edges}
\item{\code{uncertain.labels}}{the labels of the uncertain edges}
}
\description{
Construct functions to generate constrained random community
matrices
}
\details{
Given an edge list with simple "a < b" edge weight constraints,
this function constructs a list of functions that can be used to
generate random community matrices that correspond to the
constrained directed graph.

If the edge list contains uncertain edges, any constraint
involving an uncertain edge is dropped if that edge is not
represented in the matrix.

This version of generates random community matrices by rejection,
and can be extremely inefficient if the constraints are complex.
}
\examples{
set.seed(32)
## Sample model
edges <- parse.digraph(c(
  "E *-> D",
  "D *-> C",
  "C -> E",
  "E *-> B",
  "B *-> A",
  "A -> E",
  "D --> B"))
edges <- enforce.limitation(edges)
constrained <- parse.constraints(c(
  "E -> D < D -* E",
  "C -> E < A -> E",
  "D -> B < D -* E"),
  edges)
s <- community.ordering.sampler(constrained)
## Force D --> B edge out
s$select(0)
## Generate community matrices
s$community()
s$community()
## Force D --> B edge in
s$select(1)
## Generate community matrices
s$community()
s$community()
## Select the uncertain D --> B edge with prob 0.6
s$select(0.6)
## Generate community matrices
s$community()
s$community()
}
\seealso{
\code{\link{community.sampler}}
}

