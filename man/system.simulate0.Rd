% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Community.R
\name{system.simulate0}
\alias{system.simulate0}
\title{Simulate System}
\usage{
system.simulate0(n.sims, edges, required.groups = c(0), validators = NULL)
}
\arguments{
\item{n.sims}{number of matrices to simulate.}

\item{edges}{an edge list.}

\item{required.groups}{a vector of integers specifying which groups of edges must always occur in the community matrix.}

\item{validators}{an (optional) list of validation functions
generated by \code{press.validate}.}
}
\value{
Returns a list with elements
\item{\code{edges}}{The edge list}
\item{\code{W}}{A list of community matrices}
\item{\code{w}}{A matrix of the corresponding edge weights}
\item{\code{stable}}{Logical vector indicating which  matrices are stable}
\item{\code{accepted}}{Logical vector indicating which matrices meet the validation criteria}
}
\description{
Simulate Community Matrices for a Network
}
\details{
This function is a primitive form of \code{system.simulate}.

Given a directed graph this function simulates edge weights and
community matrices consistent with the given model.  Each
simulated community matrix is tested for stability and is

But where \code{system.simulate} only returns matrices that are
stable and meet the validation criteria, \code{system.simulate0}
returns every matrix simulated together with two logical vectors
that indicate which matrices are stable and which meet the imposed
validation criteria.

This function is a simple wrapper for \code{community.sampler},
\code{stable.community} and the functions generated by
\code{press.validate}.
}
\examples{
set.seed(32)
## Sample model
edges <- parse.text(c(
  "E *-> D",
  "D *-> C",
  "C -> E",
  "E *-> B",
  "B *-> A",
  "A -> E",
  "D --> B"))
edges <- enforce.limitation(edges)
sims <- system.simulate(10,edges,
                        validators=list(
                          press.validate(edges,
                                         perturb=c(D=1),
                                         monitor=c(D=1)),
                          press.validate(edges,
                                         perturb=c(D=1),
                                         monitor=c(B=-1,C=1))))
}
